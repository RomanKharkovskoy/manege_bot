import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, ContentType
from aiogram.filters import Command
from aiogram import F
from datetime import datetime
from image_checker import check_image  
from database import create_tables, add_user, update_user_progress, get_user_progress, user_exists

API_TOKEN = 'API_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

QUEST_IMAGES_FOLDER = 'quest_images'
IDEAL_IMAGES_FOLDER = 'ideal_images'

TEMP_FOLDER = 'temp'
os.makedirs(TEMP_FOLDER, exist_ok=True)

ROUNDS = {
    1: 7, 
    2: 7, 
    3: 6   
}

HINTS_FILE = 'hints.txt'

def load_hints():
    hints = {}
    if os.path.exists(HINTS_FILE):
        with open(HINTS_FILE, 'r', encoding='utf-8') as file:
            for line in file:
                key, hint = line.strip().split(': ', 1)
                hints[key] = hint
    return hints

hints = load_hints()

create_tables()

control_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –í–ª–µ–≤–æ'), KeyboardButton(text='‚û°Ô∏è –í–ø—Ä–∞–≤–æ')],
        [KeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞')]
    ],
    resize_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ù–∞—á–∞—Ç—å')]
    ],
    resize_keyboard=True
)

@dp.message(Command('start'))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    await message.answer('''–ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –∫–≤–µ—Å—Ç–µ :)\n 
üî¥ –ù–∞–ø–æ–º–Ω–∏–º –æ –ø—Ä–∞–≤–∏–ª–∞—Ö:\n
‚ö™Ô∏è –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–∏–Ω —Å –≤—ã—Å—Ç–∞–≤–∫–∏.\n
üî¥ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–∞—Ä—Ç–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–∏—Å–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.\n
‚ö™Ô∏è –ü—Ä–æ—Å–∏–º –≤–∞—Å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∞ —Ç–∞–∫–∂–µ —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –∑–∞–ª–µ –∏ –Ω–µ –º–µ—à–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º –≤—ã—Å—Ç–∞–≤–∫–∏.\n
üî¥ –£ –≤–∞—Å –µ—Å—Ç—å 2 –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Å —É–º–æ–º. \n
‚ö™Ô∏è –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –∫–≤–µ—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–µ –≤–∏–¥–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∑–Ω–∞—á–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –±–æ—Ç).\n 
üî¥ –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!\n
‚ö™Ô∏è –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–∏—à–∏—Ç–µ @RomanKharkovskoy \n
''', reply_markup=start_keyboard)
    await message.answer_photo(FSInputFile('keyboard_button.png', 'rb'))

@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def register_handler(message: types.Message):
    user_id = message.from_user.id
    if not user_exists(user_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        add_user(user_id, "", "") 
        update_user_progress(user_id, 1, 1, 2, set())
    else:
        user_progress = get_user_progress(user_id)
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {user_progress['name']} {user_progress['surname']}!",
                             reply_markup=control_keyboard)
        await show_image(message)

@dp.message(lambda message: get_user_progress(message.from_user.id)['name'] == "")
async def process_name(message: types.Message):
    user_id = message.from_user.id
    name = message.text
    update_user_progress(user_id, name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")

@dp.message(lambda message: get_user_progress(message.from_user.id)['surname'] == "" and get_user_progress(message.from_user.id)['name'] != "")
async def process_surname(message: types.Message):
    user_id = message.from_user.id
    surname = message.text
    update_user_progress(user_id, surname=surname)
    user_progress = get_user_progress(user_id)
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {user_progress['name']} {surname}!", reply_markup=control_keyboard)
    await show_image(message)

async def show_image(message: types.Message):
    user_id = message.from_user.id
    user_progress = get_user_progress(user_id)
    current_round = user_progress['current_round']
    current_image = user_progress['current_image']
    image_path = os.path.join(QUEST_IMAGES_FOLDER, f'{current_round}_round', f'{current_image}.jpg')
    
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await message.answer_photo(photo)
    else:
        await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@dp.message(F.text.in_(['‚¨ÖÔ∏è –í–ª–µ–≤–æ', '‚û°Ô∏è –í–ø—Ä–∞–≤–æ', 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞']))
async def button_handler(message: types.Message):
    user_id = message.from_user.id
    user_progress = get_user_progress(user_id)
    current_round = user_progress['current_round']
    max_images = ROUNDS[current_round]

    current_image_index = user_progress['current_image']

    if message.text == '‚¨ÖÔ∏è –í–ª–µ–≤–æ':
        if current_image_index == 1:
            user_progress['current_image'] = max_images
        else:
            user_progress['current_image'] = current_image_index - 1

    elif message.text == '‚û°Ô∏è –í–ø—Ä–∞–≤–æ':
        if current_image_index == max_images:
            user_progress['current_image'] = 1
        else:
            user_progress['current_image'] = current_image_index + 1

    elif message.text == 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞':
        current_image = user_progress['current_image']
        hint_key = f'{current_round}_{current_image}'
        if user_progress['hints_left'] > 0:
            user_progress['hints_left'] -= 1
            if hint_key in hints:
                hint = hints[hint_key]
                await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")
            else:
                await message.answer("–î–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏.")

            update_user_progress(user_id, current_round, current_image, user_progress['hints_left'], user_progress['completed_images'])
        else:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∏.")

    update_user_progress(user_id, user_progress['current_round'], user_progress['current_image'],
                         user_progress['hints_left'], user_progress['completed_images'])

    await show_image(message)

@dp.message(F.content_type == ContentType.PHOTO)
async def process_image_upload(message: types.Message):
    user_id = message.from_user.id
    user_progress = get_user_progress(user_id)

    try:
        photo = message.photo[-1]

        file_info = await bot.get_file(photo.file_id)
        uploaded_image_path = os.path.join(TEMP_FOLDER, f'uploaded_{user_id}.jpg')

        await bot.download_file(file_info.file_path, uploaded_image_path)

        current_image_number = user_progress['current_image']

        round_folder = os.path.join(IDEAL_IMAGES_FOLDER, f'{user_progress["current_round"]}_round')
        ideal_image_path = os.path.join(round_folder, f'{current_image_number}.jpg')

        if not os.path.exists(ideal_image_path):
            await message.answer(f"–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {ideal_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if check_image(ideal_image_path, uploaded_image_path):
            user_progress['completed_images'].add(current_image_number)
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–≤–ø–∞–ª–∞ —Å —ç—Ç–∞–ª–æ–Ω–æ–º, –º–æ–ª–æ–¥–µ—Ü!")

            if len(user_progress['completed_images']) == ROUNDS[user_progress['current_round']]:
                user_progress['current_round'] += 1
                user_progress['current_image'] = 1
                user_progress['completed_images'] = set()

                if user_progress['current_round'] > len(ROUNDS):
                    end_time = datetime.now().isoformat()
                    update_user_progress(user_id, end_time=end_time)
                    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ! –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –º—ã –æ–±—ä—è–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ. –ñ–¥–µ–º –Ω–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ –≤ 21:00!")
                    update_user_progress(user_id, current_round=user_progress['current_round'],
                                         completed_images=user_progress['completed_images'])
                    return

                await message.answer(f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —ç—Ç–∞–ø {user_progress['current_round']}!")
        else:
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞ —Å —ç—Ç–∞–ª–æ–Ω–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    finally:
        if os.path.exists(uploaded_image_path):
            os.remove(uploaded_image_path)

        update_user_progress(user_id, current_round=user_progress['current_round'],
                             current_image=user_progress['current_image'],
                             hints_left=user_progress['hints_left'],
                             completed_images=user_progress['completed_images'])


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
